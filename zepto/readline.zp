(module "readline"
  (export
    (list "readline" readline)
    (list "add-completion" add-completion)
    (list "add-completions" add-completions)
    (list "reset-completions" reset-completions)
    (list "add-history" add-history)
    (list "get-history" get-history)
    (list "set-history!" set-history!))

  (-highlight #f)
  (completions [])

  (first-separator (lambda (str)
    (add1 (get-from (regex:matches-indices r/\s|\[|\]|\{|\}|\)|\(|\'/ str) [0 0] -1))))

  (zhighlight (lambda (str)
    (let ((col (lambda (x) (color x #{:to-str #t})))
          (orange (delay (escape-sequence "38;5;208" #t (nil)))))
      (let loop ((str str) (acc ""))
        (if (null? str)
          acc
          (case (car str)
            ((#\{ #\} #\[ #\] #\)) =>
              (lambda (char) (loop (cdr str) (++ acc (col :magenta) (string char) (col :reset)))))
            ((#\()
                (let* ((i (first-separator (cdr str)))
                       (hd (substring str 1 (if (> i 0) i (length str))))
                       (tl (substring str (if (> i 0) i (length str)) (length str))))
                  (loop tl (++ acc (col :magenta) "(" (col :bold) (col :cyan) hd (col :reset)))))
            ((#\')
              (if (> (length str) 1)
                (let ((next (cadr str)))
                  (if (eq? #\( next)
                    (loop (cddr str) (++ acc (col :magenta) "'(" (col :reset)))
                    (let* ((i (first-separator (cdr str)))
                           (hd (substring str 0 (if (> i 0) i (length str))))
                           (tl (substring str (if (> i 0) i (length str)) (length str))))
                      (loop tl (++ acc (col :green) hd (col :reset))))))
                (loop (cdr str) (++ acc (col :green) "'" (col :reset)))))
            ((#\#)
              (case (get-from str 1 "")
                ((#\{) (loop (cddr str) (++ acc (col :magenta) "#{" (col :reset))))
                ((#\t #\f) =>
                  (lambda (char) (loop (cddr str) (++ acc (orange) "#" (string char) (col :reset)))))
                ((#\\)
                  (let* ((i (first-separator (cdr str)))
                         (hd (substring str 0 (if (> i 0) i (length str))))
                         (tl (substring str (if (> i 0) i (length str)) (length str))))
                    (loop tl (++ acc (orange) hd (col :reset)))))
                (else (loop (cdr str) (++ acc (orange) "#" (col :reset))))))
            ((#\;)
                (let* ((i (add1 (index-of (cdr str) #\newline)))
                       (hd (substring str 0 (add1 (if (> i 0) i (length str)))))
                       (tl (substring (cdr str) (if (> i 0) i (length str)) (length str))))
                  (loop tl (++ acc (col :white) hd (col :reset)))))
            ((#\:)
                (if (char:alpha? (get-from acc (length acc) #\?))
                  (loop (cdr str) (++ acc (get-from str 0 "")))
                  (let* ((i (first-separator (cdr str)))
                         (hd (substring str 0 (if (> i 0) i (length str))))
                         (tl (substring str (if (> i 0) i (length str)) (length str))))
                    (loop tl (++ acc (col :yellow) hd (col :reset))))))
            ((#\")
                (let* ((i (add1 (index-of (cdr str) #\")))
                       (hd (substring str 0 (add1 (if (> i 0) i (length str)))))
                       (tl (substring (cdr str) (if (> i 0) i (length str)) (length str))))
                  (loop tl (++ acc (orange) hd (col :reset)))))
            (else => 
              (lambda (char)
                (if (char:num? char)
                  (let* ((i (first-separator (cdr str)))
                         (hd (substring str 0 (if (> i 0) i (length str))))
                         (tl (substring str (if (> i 0) i (length str)) (length str))))
                    (loop tl (++ acc (orange) hd (col :reset))))
                  (loop (cdr str) (++ acc char)))))))))))
  (history [])

  (go-back (lambda (n)
      (++ (string (integer->char 27)) "[" (number->string n) "D")))

  (remove-from-input (lambda (count)
    (let* ((p (curry string:replicate count))
           (b (p #\backspace)))
      (display (++ b (p #\space) b) :flush))))

  (replace-input (lambda (old new)
    (begin
      (remove-from-input (length old))
      (display (if (list? new) (list->string new) new) :flush))))

  (cleanup (lambda (c f)
    (lambda (state)
      (begin
        (remove-from-input c)
        (f state)))))

  (move-to-beginning (lambda (state)
    (hash:set state :pos 0)))

  (move-to-end (lambda (state)
    (hash:set state :pos (length (state :acc)))))

  (history-up (lambda (state)
    (if (>= (state :cur) (sub1 (length history)))
      state
      (let* ((update-cur (hash:update state :cur add1))
             (elem (list:ref history (update-cur :cur)))
             (update-pos (hash:set update-cur :pos (length elem))))
        (hash:set update-pos :acc (string->list elem))))))

  (history-down (lambda (state)
    (if (<= (state :cur) 0)
      (new-state (state :prompt))
      (let* ((update-cur (hash:update state :cur sub1))
             (elem (list:ref history (update-cur :cur)))
             (update-pos (hash:set update-cur :pos (length elem))))
        (hash:set update-pos :acc (string->list elem))))))

  (cursor-left (lambda (state)
    (if (> 0 (sub1 (state :pos)))
        state
        (hash:update state
                     :pos
                     sub1))))

  (cursor-right (lambda (state)
    (if (< (length (state :acc)) (add1 (state :pos)))
        state
        (hash:update state 
                     :pos
                     add1))))

  (backspace (lambda (state)
    (if (and (> (length (state :acc)) 0) (> (state :pos) 0))
      (begin
        (remove-from-input 3)
        (hash:update (hash:update state :pos sub1)
                     :acc
                     (lambda (acc) (list:remove-n acc (sub1 (state :pos))))))
      (begin
        (remove-from-input 2)
        state))))

  (_search-backspace (lambda (term)
    (if (> (length term) 0)
      (begin
        (remove-from-input 3)
        (substring term 0 (sub1 (length term))))
      (begin
        (remove-from-input 2)
        term))))

  (_seps [#\space #\(])

  (_split-at-last-separator (lambda (str)
    (define (internal last-i i str)
      (cond
        ((null? str) last-i)
        ((in? _seps (car str)) (internal i (add1 i) (cdr str)))
        (else (internal last-i (add1 i) (cdr str)))))
    (let ((sepi (internal -1 1 str)))
      (if (> 0 sepi)
        (list "" str)
        (list (substring str 0 sepi) (substring str sepi (length str)))))))

  (common-prefix (lambda (strings)
    (let loop ((prefix (->string (get-from strings [0 0]))))
      (if (all? ($ (string:starts-with % prefix)) strings)
        (let ((nprefix (get-from strings (list 0 (length prefix)))))
          (if (nil? nprefix)
            prefix
            (loop (++ prefix nprefix))))
        (substring prefix 0 (sub1 (length prefix)))))))

  (complete (lambda (state)
    (begin
      (let* ((acc (list->string (state :acc)))
             (sep (_split-at-last-separator acc))
             (term (cadr sep))
             (matches (filter (lambda (item) (string:starts-with item term)) completions)))
        (case (length matches)
          ((0) state)
          ((1) 
            (let ((nstate (hash:set state :acc (string->list (++ (car sep) (car matches))))))
              (hash:set nstate :pos (length (nstate :acc)))))
          (else
            (begin
              (write "")
              (reduce (lambda (acc x)
                        (let ((len (length x)))
                          (if (> (+ acc len) 80)
                            (begin (display (++ "\n" x "\t")) len)
                            (begin (display (++ x "\t")) (+ acc 4 len)))))
                      0
                      matches)
              (write "")
              (let ((nstate (hash:set state :acc
                                      (string->list (++ (car sep)
                                                        (common-prefix matches))))))
                (hash:set nstate :pos (length (nstate :acc)))))))))))

  (_search (lambda (state term)
    (begin
      (remove-from-input (+ (length (state :acc)) (length (state :prompt))))
      (display (++ "(reverse-i-search)`" term "': ") :flush)
      (let* ((matches (filter (lambda (item) (in? item term)) history))
             (best (get-from matches 0 ""))
             (state (hash:set state :acc (if (truthy? best) (string->list best) (string->list term)))))
        (begin
          (display best :flush)
          (case (read-char)
              ((#\newline) (list->string (state :acc)))
              ((#\x1B) (_readline (treat-special state)))
              ((eq? #\x7f char)
                (_search state (_search-backspace term)))
              ((eq? 1 (char->integer char)) (_readline (move-to-beginning state)))
              ((eq? 2 (char->integer char)) (_readline (cursor-left state)))
              ((eq? 5 (char->integer char)) (_readline (move-to-end state)))
              ((eq? 6 (char->integer char)) (_readline (cursor-right state)))
              ((eq? 14 (char->integer char)) (_readline (history-up state)))
              ((eq? 16 (char->integer char)) (_readline (history-down state)))
              ((eq? 18 (char->integer char)) (_readline (reverse-search state)))
              (else => (lambda (char) (_search state (++ term char))))))))))

  (reverse-search (lambda (state)
    (begin
      (let ((found (_search state "")))
        found))))

  (special (make-hash "[A" (cleanup 4 history-up)
                      "[B" (cleanup 4 history-down)
                      "[D" (cleanup 4 cursor-left)
                      "[C" (cleanup 4 cursor-right)))

  (treat-special (lambda (state)
    (let ((thing (string (read-char) (read-char))))
      (if (hash:contains? special thing)
        ((special thing) state)
        (hash:update state
                     :acc
                     (lambda (acc) (list:insert acc (state :pos) (string->list (++ "^[" thing)))))))))

  (clean-prompt (lambda (state)
    (begin
      (remove-from-input (+ (length (state :acc)) (length (state :prompt))))
      (display (state :prompt) :flush)
      (if -highlight
        (display (zhighlight (list->string (state :acc))) :flush)
        (display (list->string (state :acc)) :flush))
      (let ((diff (- (length (state :acc)) (state :pos))))
        (if (> diff 0)
          (display (go-back diff) :flush))))))

  (_readline (lambda (state)
    (begin
      (clean-prompt state)
      (let ((char (read-char)))
        (cond
          ((eq? #\newline char) (list->string (state :acc)))
          ((eq? #\carriage char) (begin (remove-from-input 2) (write "") (list->string (state :acc))))
          ((eq? #\x1B char) (_readline (treat-special state)))
          ((eq? 1 (char->integer char)) (_readline (move-to-beginning state)))
          ((eq? 2 (char->integer char)) (_readline (cursor-left state)))
          ((eq? 5 (char->integer char)) (_readline (move-to-end state)))
          ((eq? 6 (char->integer char)) (_readline (cursor-right state)))
          ((eq? 9 (char->integer char)) (_readline (complete state)))
          ((eq? 14 (char->integer char)) (_readline (history-up state)))
          ((eq? 16 (char->integer char)) (_readline (history-down state)))
          ((eq? 18 (char->integer char)) (reverse-search state))
          ((eq? #\x7f char)
            (_readline (backspace state)))
          (else
            (let ((insert-char (hash:update state
                                             :acc
                                             (lambda (acc) (list:insert acc (state :pos) char)))))
              (_readline (hash:update insert-char :pos add1)))))))))

  (add-history (lambda (item)
    (set! history (cons item history))))

  (set-history! (lambda (hist)
    (set! history hist)))

  (get-history (lambda () history))

  (add-completion (lambda (item)
    (set! completions (cons item completions))))

  (add-completions (lambda (items)
    (set! completions (++ completions items))))

  (reset-completions (lambda (comp)
    (set! completions comp)))

  (new-state (lambda (prompt)
    (make-hash :cur -1 :pos 0 :acc [] :prompt prompt)))

  (readline (lambda (prompt . highlight)
    (begin
      (set! -highlight (get-from highlight 0 #f))
      (_readline (new-state prompt))))))
